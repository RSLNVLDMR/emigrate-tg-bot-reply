// api/telegram.js ‚Äî Vercel serverless (Node/ESM) + grammY
import { Bot, InlineKeyboard } from "grammy";

const {
  BOT_TOKEN,            // —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  BOT_SECRET,           // —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –≤–µ–±—Ö—É–∫–∞
  SUPPORT_USER_ID,      // –ß–ò–°–õ–û–í–û–ô ID: 7437456248
  SUPPORT_USERNAME      // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: username –±–µ–∑ @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, emigrate_support)
} = process.env;

if (!BOT_TOKEN) throw new Error("BOT_TOKEN is not set");
if (!BOT_SECRET) throw new Error("BOT_SECRET is not set");
if (!SUPPORT_USER_ID) throw new Error("SUPPORT_USER_ID is not set");

const bot = new Bot(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ (serverless-safe)
let initPromise = null;
async function ensureBotInit() {
  if (initPromise) return initPromise;
  initPromise = bot.init().catch((e) => {
    initPromise = null; // –ø–æ–∑–≤–æ–ª–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
    throw e;
  });
  return initPromise;
}

function buildKeyboard() {
  const kb = new InlineKeyboard();
  // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–¥–Ω–æ–π –∫–ª–∏–µ–Ω—Ç Telegram (–º–æ–±–∞–π–ª/–¥–µ—Å–∫—Ç–æ–ø)
  kb.url("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", `tg://user?id=${Number(SUPPORT_USER_ID)}`);
  // –§–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ t.me (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω username)
  if (SUPPORT_USERNAME) {
    const uname = SUPPORT_USERNAME.replace(/^@/, "");
    kb.row().url("üåê –û—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ t.me", `https://t.me/${uname}`);
  }
  return kb;
}

const PREVIEW_PREFIX = "üîé –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏:\n\n–¢–µ–º–∞: ";

bot.command("start", async (ctx) => {
  await ctx.reply(
    "–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
    { reply_markup: buildKeyboard() }
  );
});

bot.on("message:text", async (ctx) => {
  const topic = (ctx.message.text || "").trim();
  const text =
    `${PREVIEW_PREFIX}${topic || "‚Äî"}\n\n` +
    `–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –°–∫–æ–ø–∏—Ä—É–π —Ç—É–¥–∞ —Ç–µ–º—É.`;
  await ctx.reply(text, { reply_markup: buildKeyboard() });
});

// --- Vercel HTTP handler (webhook) ---
export default async function handler(req, res) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ Telegram
  const secret = req.headers["x-telegram-bot-api-secret-token"];
  if (secret !== BOT_SECRET) {
    res.status(401).send("Unauthorized");
    return;
  }

  // GET-–ø–∏–Ω–≥/–ø—Ä–æ–≤–µ—Ä–∫–∞
  if (req.method !== "POST") {
    res.status(200).send("OK");
    return;
  }

  try {
    await ensureBotInit();
    await bot.handleUpdate(req.body || {});
    res.status(200).send("OK");
  } catch (err) {
    console.error("Webhook error:", err);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
    res.status(200).send("OK");
  }
}
