import { Bot, InlineKeyboard } from "grammy";

const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPPORT_USER_ID = process.env.SUPPORT_USER_ID;
const BOT_SECRET = process.env.BOT_SECRET;

if (!BOT_TOKEN) throw new Error("BOT_TOKEN is not set");
if (!SUPPORT_USER_ID) throw new Error("SUPPORT_USER_ID is not set");
if (!BOT_SECRET) throw new Error("BOT_SECRET is not set");

const bot = new Bot(BOT_TOKEN);

const PREVIEW_PREFIX = "üîé –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏:\n\n–¢–µ–º–∞: ";

bot.command("start", (ctx) =>
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏–º—É —Ç–≤–æ—é –∑–∞—è–≤–∫—É.\n\n" +
      "1) –ü—Ä–∏—à–ª–∏ —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n" +
      "2) –ù–∞–∂–º–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª –ø–æ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º."
  )
);

bot.on("message:text", async (ctx) => {
  const topic = ctx.message.text.trim();
  if (!topic) return ctx.reply("–ü—É—Å—Ç—É—é —Ç–µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è.");
  const kb = new InlineKeyboard()
    .text("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "send_request")
    .row()
    .text("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", "noop");
  await ctx.reply(`${PREVIEW_PREFIX}${topic}\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`, { reply_markup: kb });
});

bot.callbackQuery("noop", (ctx) =>
  ctx.answerCallbackQuery({ text: "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ç–µ–º–æ–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º." })
);

bot.callbackQuery("send_request", async (ctx) => {
  await ctx.answerCallbackQuery();
  const msg = ctx.callbackQuery.message;
  let topic = "";
  if (msg && "text" in msg && typeof msg.text === "string") {
    const full = msg.text;
    const start = full.indexOf(PREVIEW_PREFIX);
    if (start >= 0) {
      const slice = full.slice(start + PREVIEW_PREFIX.length);
      const stop = slice.indexOf("\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ");
      topic = (stop >= 0 ? slice.slice(0, stop) : slice).trim();
    }
  }
  if (!topic) return ctx.editMessageText("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—É. –ü—Ä–∏—à–ª–∏ –µ—ë –µ—â—ë —Ä–∞–∑.");

  const u = ctx.from;
  const mention = `<a href="tg://user?id=${u.id}">${escapeHtml(
    u.first_name + (u.last_name ? " " + u.last_name : "")
  )}</a>`;
  const username = u.username ? `@${u.username}` : "‚Äî";
  const text =
    "üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n" +
    `–û—Ç: ${mention}\nUser ID: <code>${u.id}</code>\nUsername: ${escapeHtml(username)}\n\n` +
    `–¢–µ–º–∞: ${escapeHtml(topic)}`;

  try {
    await ctx.api.sendMessage(Number(SUPPORT_USER_ID), text, { parse_mode: "HTML", disable_web_page_preview: true });
    await ctx.editMessageText("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.");
  } catch (e) {
    await ctx.editMessageText(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É / –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ—Å–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É."
    );
    console.error(e);
  }
});

function escapeHtml(s) {
  return s.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;");
}

export default async function handler(req, res) {
  const secret = req.headers["x-telegram-bot-api-secret-token"];
  if (secret !== BOT_SECRET) return res.status(401).send("Unauthorized");
  if (req.method !== "POST") return res.status(200).send("OK");
  try {
    await bot.handleUpdate(req.body || {});
    res.status(200).send("OK");
  } catch (err) {
    console.error("Webhook error:", err);
    res.status(200).send("OK");
  }
}
