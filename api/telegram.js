// Serverless Telegram bot on Vercel (Node runtime).
// Framework: bare grammY + webhook, no session state required.
// Topic –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ "–ø—Ä–µ–≤—å—é" —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ (–Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è serverless).

import { Bot, InlineKeyboard } from "grammy";

const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPPORT_USER_ID = process.env.SUPPORT_USER_ID; // number or negative (group)
const BOT_SECRET = process.env.BOT_SECRET; // any random string; must match webhook setup

if (!BOT_TOKEN) throw new Error("BOT_TOKEN is not set");
if (!SUPPORT_USER_ID) throw new Error("SUPPORT_USER_ID is not set");
if (!BOT_SECRET) throw new Error("BOT_SECRET is not set");

// Create bot once (Vercel keeps module cached while warm)
const bot = new Bot(BOT_TOKEN);

// text helpers
const PREVIEW_PREFIX = "üîé –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏:\n\n–¢–µ–º–∞: ";

// /start
bot.command("start", async (ctx) => {
  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏–º—É —Ç–≤–æ—é –∑–∞—è–≤–∫—É.\n\n" +
      "1) –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–º—É –∑–∞—è–≤–∫–∏ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç).\n" +
      "2) –ù–∞–∂–º–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª –ø–æ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º."
  );
});

// any text = capture topic and show button
bot.on("message:text", async (ctx) => {
  const topicRaw = (ctx.message.text || "").trim();
  if (!topicRaw) {
    return ctx.reply("–ü—É—Å—Ç—É—é —Ç–µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.");
  }

  // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –í–∞–∂–Ω–æ: –≤–∫–ª—é—á–∞–µ–º —Ç–µ–º—É –≤ —Å–∞–º —Ç–µ–∫—Å—Ç,
  // —á—Ç–æ–±—ã –Ω–∞ –∫–æ–ª–±—ç–∫–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—ë –∏–∑–≤–ª–µ—á—å –∏–∑ ctx.callbackQuery.message.text.
  const preview =
    PREVIEW_PREFIX +
    topicRaw +
    "\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.";

  const kb = new InlineKeyboard()
    .text("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "send_request")
    .row()
    .text("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É (–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç)", "noop");

  await ctx.reply(preview, { reply_markup: kb });
});

// noop (–ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç)
bot.callbackQuery("noop", async (ctx) => {
  await ctx.answerCallbackQuery({ text: "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º." });
});

// send_request: parse topic from preview message and forward to SUPPORT_USER_ID
bot.callbackQuery("send_request", async (ctx) => {
  await ctx.answerCallbackQuery();

  const msg = ctx.callbackQuery.message;
  const user = ctx.from;

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É: –ø–æ—Å–ª–µ PREVIEW_PREFIX –¥–æ –∫–æ–Ω—Ü–∞ –∏–ª–∏ –¥–æ "\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ"
  let topic = "";
  if (msg && "text" in msg && typeof msg.text === "string") {
    const full = msg.text;
    const start = full.indexOf(PREVIEW_PREFIX);
    if (start >= 0) {
      const slice = full.slice(start + PREVIEW_PREFIX.length);
      const stopMarker = "\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ";
      const end = slice.indexOf(stopMarker);
      topic = (end >= 0 ? slice.slice(0, end) : slice).trim();
    }
  }

  if (!topic) {
    // fallback: –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    await ctx.editMessageText(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—É –∑–∞—è–≤–∫–∏. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º –µ—â—ë —Ä–∞–∑."
    );
    return;
  }

  const mention = `<a href="tg://user?id=${user.id}">${escapeHtml(
    user.first_name + (user.last_name ? " " + user.last_name : "")
  )}</a>`;
  const username = user.username ? `@${user.username}` : "‚Äî";

  const supportText =
    "üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n" +
    `–û—Ç: ${mention}\n` +
    `User ID: <code>${user.id}</code>\n` +
    `Username: ${escapeHtml(username)}\n\n` +
    `–¢–µ–º–∞: ${escapeHtml(topic)}`;

  try {
    await ctx.api.sendMessage(Number(SUPPORT_USER_ID), supportText, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
  } catch (e) {
    // —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∂–∏–º–∞–ª /start –±–æ—Ç—É; –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    await ctx.editMessageText(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.\n\n" +
        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
        "‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É (/start)\n" +
        "‚Ä¢ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n\n" +
        "–ü–æ–ø—Ä–æ—Å–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –±–æ—Ç—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç."
    );
    console.error("Failed to DM SUPPORT_USER_ID:", e);
    return;
  }

  await ctx.editMessageText("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –ª–∏—á–∫–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.");
});

function escapeHtml(s) {
  return s
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;");
}

// ---- Vercel HTTP handler (webhook) ----
export default async function handler(req, res) {
  // Verify secret token from Telegram
  const secret = req.headers["x-telegram-bot-api-secret-token"];
  if (secret !== BOT_SECRET) {
    res.status(401).send("Unauthorized");
    return;
  }

  if (req.method !== "POST") {
    res.status(200).send("OK");
    return;
  }

  try {
    // Vercel auto-parses JSON if header is correct; ensure we have body
    const update = req.body || {};
    await bot.handleUpdate(update);
    res.status(200).send("OK");
  } catch (err) {
    console.error("Webhook error:", err);
    res.status(200).send("OK"); // Telegram expects 200 to stop retries; log the error instead
  }
}
